 delete_from_list([1, 2, 3, 4, 3], 3)
#     [1, 2, 4]
#     >>> delete_from_list(['a', 'b', 'c', 'b', 'd'], 'b')
#     ['a', 'c', 'd']
#     >>> delete_from_list([1, 2, 3], 'b')
#     [1, 2, 3]
#     >>> delete_from_list([], 'b')
#     []
# """
# from typing import List, Any
#
#
# def delete_from_list(list_to_clean: List, item_to_delete: Any) -> List:
#     ...

# from typing import List, Any
# def delete_from_list(list_to_clean: List, item_to_delete: Any) -> List:
# #     for i in range(len(list_to_clean)):
# #         if list_to_clean[i]==item_to_delete:
# #             list_to_clean.pop(i)
# #     print(list_to_clean)
#
#    while item_to_delete in list_to_clean:
#     list_to_clean.pop(list_to_clean.index(item_to_delete))
#    return list_to_clean
#
#
# print(delete_from_list([1, 2, 3, 4, 3], 3))

# Write function which updates dictionary with defined values but only if new value more then in dict
# Restriction: do not use .update() method of dictionary
# Examples:
#     >>> set_to_dict({'a': 1, 'b': 2, 'c': 3}, a=0, b=4)  # only b updated because new value for a less then original value
#     {'a': 1, 'b': 4, 'c': 3}
#     >>> set_to_dict({}, a=0)
#     {a: 0}
#     >>> set_to_dict({'a': 5})
#     {'a': 5}
# """
# from typing import Dict
#  def set_to_dict(dict_to_update: Dict[str, int], **items_to_set) -> Dict:

# from typing import Dict
#
#
# def set_to_dict(dict_to_update: Dict[str, int], **items_to_set) -> Dict:
#     if not items_to_set:
#         return dict_to_update
#
#     for key,value in items_to_set.items():
#         if dict_to_update[key]<value:
#             dict_to_update[key]=value
#     return dict_to_update
#
# print(set_to_dict({'a': 5}))

# Write function which receives list of text lines (which is space separated words) and word number.
# It should enumerate unique words from each line and then build string from all words of given number.
# Restriction: word_number >= 0
# Examples:
#     >>> build_from_unique_words('a b c', '1 1 1 2 3', 'cat dog milk', word_number=1)
#     'b 2 dog'
#     >>> build_from_unique_words('a b c', '', 'cat dog milk', word_number=0)
#     'a cat'
#     >>> build_from_unique_words('1 2', '1 2 3', word_number=10)
#     ''
#     >>> build_from_unique_words(word_number=10)


# from typing import Iterable
# def build_from_unique_words(*lines: Iterable[str], word_number: int) -> str:
#     result=[]
#     for line in lines:
#         new_line=[]
#         for el in line.split():
#             if el not in new_line:
#                 new_line.append(el)
#         try:
#             result.append(new_line[word_number])
#         except IndexError:
#             pass
#     return ' '.join(result)
#
# print(build_from_unique_words('a b c', '1 1 1 2 3', 'cat dog milk', word_number=1))

# Write function which receives list of integers. Calculate power of each integer and
# subtract difference between original previous value and it's power. For first value subtract nothing.
# Restriction:
# Examples:
#     >>> calculate_power_with_difference([1, 2, 3])
#     [1, 4, 7]  # because [1^2, 2^2 - (1^2 - 1), 3^2 - (2^2 - 2)]


# from typing import List
#
#
# def calculate_power_with_difference(ints: List[int]) -> List[int]:
#     if not ints:
#         return []
#
#     new_ints = [ints[0] ** 2]
#
#     if len(ints) > 1:
#         for i in range(1, len(ints)):
#             new_ints.append(ints[i] ** 2 - ints[i - 1])
#
#     return new_ints
#
# print(calculate_power_with_difference([1, 2, 3]))

# Write function which receives line of space sepparated words.   POPROBOWAT SET
# Remove all duplicated words from line.
# Restriction:
# Examples:
#     >>> remove_duplicated_words('cat cat dog 1 dog 2')
#     'cat dog 1 2'
#     >>> remove_duplicated_words('cat cat cat')
#     'cat'
#     >>> remove_duplicated_words('1 2 3')
#     '1 2 3'
# """
# def remove_duplicated_words(line: str) -> str:

# Write function which receives filename and reads file line by line and returns min and mix integer from file.
# Restriction: filename always valid, each line of file contains valid integer value
# Examples:
#     # file contains following lines:
#         10
#         -2
#         0
#         34
#     >>> get_min_max('filename')
#     (-2, 34)
# Hint:
# To read file line-by-line you can use this:
# with open(filename) as opened_file:
#     for line in opened_file:
#         ...
# """

from typing import Tuple


def get_min_max(filename: str) -> Tuple[int, int]:
    with open('numbers.txt', 'r') as file:
        numbers=file.read()
        numbers = list(map(int, numbers.split()))
        return min(numbers), max(numbers)


print(get_min_max('numbers.txt'))
